{
    "name": "Компетентность в сфере фронтенд-разработки и основных языков",
    "description": "Оценка знаний и навыков в области фронтенд-разработки, включая HTML, CSS, JavaScript и современные фреймворки",
    "questions": [
        {
            "text": "Напишите функцию на JavaScript, которая находит все дубликаты в массиве чисел и возвращает новый массив с уникальными дублирующимися значениями.",
            "type": "code",
            "points": 10,
            "test_cases": [
                {
                    "input": "[1, 2, 3, 2, 4, 5, 4, 6]",
                    "expected": "[2, 4]",
                    "description": "Базовый тест с двумя дубликатами"
                },
                {
                    "input": "[1, 1, 1, 2, 2, 3]",
                    "expected": "[1, 2]",
                    "description": "Тест с множественными дубликатами"
                },
                {
                    "input": "[1, 2, 3, 4, 5]",
                    "expected": "[]",
                    "description": "Тест без дубликатов"
                }
            ],
            "example_solutions": [
                "function findDuplicates(arr) {\n    return [...new Set(arr.filter((item, index) => arr.indexOf(item) !== index))];\n}",
                "function findDuplicates(arr) {\n    const counts = {};\n    const duplicates = [];\n    arr.forEach(num => {\n        counts[num] = (counts[num] || 0) + 1;\n        if (counts[num] === 2) duplicates.push(num);\n    });\n    return duplicates;\n}"
            ]
        },
        {
            "text": "Реализуйте компонент React, который отображает список задач (todo list) с возможностью добавления новых задач и отметки выполненных.",
            "type": "code",
            "points": 15,
            "test_cases": [
                {
                    "input": "Добавление новой задачи",
                    "expected": "Задача должна появиться в списке",
                    "description": "Проверка добавления задачи"
                },
                {
                    "input": "Отметка задачи как выполненной",
                    "expected": "Задача должна быть отмечена как выполненная",
                    "description": "Проверка отметки выполнения"
                }
            ],
            "example_solutions": [
                "function TodoList() {\n    const [todos, setTodos] = useState([]);\n    const [newTodo, setNewTodo] = useState('');\n\n    const addTodo = () => {\n        if (newTodo.trim()) {\n            setTodos([...todos, { text: newTodo, completed: false }]);\n            setNewTodo('');\n        }\n    };\n\n    const toggleTodo = (index) => {\n        const newTodos = [...todos];\n        newTodos[index].completed = !newTodos[index].completed;\n        setTodos(newTodos);\n    };\n\n    return (\n        <div>\n            <input\n                value={newTodo}\n                onChange={(e) => setNewTodo(e.target.value)}\n                placeholder=\"Новая задача\"\n            />\n            <button onClick={addTodo}>Добавить</button>\n            <ul>\n                {todos.map((todo, index) => (\n                    <li key={index}>\n                        <input\n                            type=\"checkbox\"\n                            checked={todo.completed}\n                            onChange={() => toggleTodo(index)}\n                        />\n                        <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n                            {todo.text}\n                        </span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}"
            ]
        },
        {
            "text": "Напишите CSS-код для создания адаптивной карточки товара, которая должна корректно отображаться на мобильных устройствах и десктопе.",
            "type": "code",
            "points": 10,
            "test_cases": [
                {
                    "input": "Мобильное устройство (ширина < 768px)",
                    "expected": "Карточка занимает всю ширину экрана",
                    "description": "Проверка мобильной версии"
                },
                {
                    "input": "Десктоп (ширина >= 768px)",
                    "expected": "Карточка имеет фиксированную ширину и отступы",
                    "description": "Проверка десктопной версии"
                }
            ],
            "example_solutions": [
                ".product-card {\n    background: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    padding: 16px;\n    margin: 16px;\n    transition: transform 0.2s;\n}\n\n.product-card:hover {\n    transform: translateY(-4px);\n}\n\n.product-image {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    border-radius: 4px;\n}\n\n.product-title {\n    font-size: 1.2rem;\n    margin: 12px 0;\n}\n\n.product-price {\n    font-size: 1.4rem;\n    color: #2ecc71;\n    font-weight: bold;\n}\n\n@media (max-width: 768px) {\n    .product-card {\n        margin: 8px;\n        padding: 12px;\n    }\n    \n    .product-title {\n        font-size: 1rem;\n    }\n    \n    .product-price {\n        font-size: 1.2rem;\n    }\n}"
            ]
        }
    ]
} 